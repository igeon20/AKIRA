import os
import time
from dotenv import load_dotenv
from binance.client import Client
import pandas as pd
import numpy as np
import ta

load_dotenv()

class BinanceBot:
    SYMBOL = "BTCUSDT"
    QTY_PRECISION = 3
    PRICE_PRECISION = 2
    MIN_QTY = 0.001
    LEVERAGE = 125  # Î†àÎ≤ÑÎ¶¨ÏßÄ (ÌïÑÏöî Ïãú Ï°∞Ï†ï)
    FEE = 0.0004  # Binance Futures ÌÖåÏù¥Ïª§ ÏàòÏàòÎ£å (0.04%)

    INIT_BALANCE = 50.0  # Ï¥àÍ∏∞ ÏûêÏÇ∞
    TP = 0.03   # Î™©Ìëú ÏàúÏàòÏùµÎ•†
    SL = -0.009 # Î™©Ìëú ÏàúÏÜêÏã§Î•†

    # (ÏÉùÎûµ: ASCII ÏïÑÌä∏ ÏÉùÎûµÌïòÏó¨ Í∞ÄÎèÖÏÑ± Ìñ•ÏÉÅ)
    AKIRA_ART = r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†â‚†â‚†â‚†â‚†õ‚†ª‚£ø‚£ø‚†ø‚†õ‚†õ‚†ô‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†à‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†î‚†â‚†Å‚†Ä‚†Ä‚†à‚†â‚†ì‚¢º‚°§‚†î‚†í‚†Ä‚†ê‚†í‚†¢‚†å‚†ø‚¢ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†§‚£í‚†∂‚†§‚†≠‚†≠‚¢ù‚°¢‚£Ñ‚¢§‚£Ñ‚£í‚°∂‚†∂‚£∂‚£¢‚°ù‚¢ø‚£ø
‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†≤‚†Æ‚¢ï‚£Ω‚†ñ‚¢©‚†â‚†ô‚£∑‚£∂‚£Æ‚°ç‚¢â‚£¥‚†Ü‚£≠‚¢â‚†ë‚£∂‚£Æ‚£Ö‚¢ª
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†í‚†í‚†ª‚£ø‚£Ñ‚†§‚†ò‚¢É‚£ø‚£ø‚°ø‚†´‚£ø‚£ø‚£Ñ‚†§‚†ò‚¢É‚£ø‚£ø‚†ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚†§‚†≠‚£•‚£Ä‚£â‚°©‚°•‚†¥‚†É‚†Ä‚†à‚†â‚†Å‚†à‚†â‚†Å‚£¥‚£æ‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†ì‚†≤‚°§‚†§‚†ñ‚†ê‚¢ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°ª‚¢∑‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ò‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚°Ä‚†Ä‚†ô‚¢ø‚£∑‚£Ω‚£Ω‚£õ‚£ü‚£ª‚†∑‚†∂‚¢∂‚£¶‚£§‚£§‚£§‚£§‚£∂‚†æ‚†ü‚£Ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ç‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†∂‚†∂‚†∂‚†∂‚†æ‚£ø‚£ü‚£ø‚£ø‚£ø
‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£∂‚£§‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    """
    PROFIT_ART = r"""
    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†â‚†â‚†â‚†â‚†õ‚†ª‚£ø‚£ø‚†ø‚†õ‚†õ‚†ô‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†à‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†î‚†â‚†Å‚†Ä‚†Ä‚†à‚†â‚†ì‚¢º‚°§‚†î‚†í‚†Ä‚†ê‚†í‚†¢‚†å‚†ø‚¢ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†§‚£í‚†∂‚†§‚†≠‚†≠‚¢ù‚°¢‚£Ñ‚¢§‚£Ñ‚£í‚°∂‚†∂‚£∂‚£¢‚°ù‚¢ø‚£ø
‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†≤‚†Æ‚¢ï‚£Ω‚†ñ‚¢©‚†â‚†ô‚£∑‚£∂‚£Æ‚°ç‚¢â‚£¥‚†Ü‚£≠‚¢â‚†ë‚£∂‚£Æ‚£Ö‚¢ª
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†í‚†í‚†ª‚£ø‚£Ñ‚†§‚†ò‚¢É‚£ø‚£ø‚°ø‚†´‚£ø‚£ø‚£Ñ‚†§‚†ò‚¢É‚£ø‚£ø‚†ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚†§‚†≠‚£•‚£Ä‚£â‚°©‚°•‚†¥‚†É‚†Ä‚†à‚†â‚†Å‚†à‚†â‚†Å‚£¥‚£æ‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†ì‚†≤‚°§‚†§‚†ñ‚†ê‚¢ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°ª‚¢∑‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ò‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚°Ä‚†Ä‚†ô‚¢ø‚£∑‚£Ω‚£Ω‚£õ‚£ü‚£ª‚†∑‚†∂‚¢∂‚£¶‚£§‚£§‚£§‚£§‚£∂‚†æ‚†ü‚£Ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ç‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†õ‚†ª‚†ø‚†ø‚†ø‚†ø‚†∂‚†∂‚†∂‚†∂‚†æ‚£ø‚£ü‚£ø‚£ø‚£ø
‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£∂‚£§‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    """
    LOSS_ART = r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†â‚†Å‚†à‚†â‚†ô‚†ª‚¢ø‚°ø‚†ø‚†õ‚†ã‚†â‚†ô‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚¢Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚††‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ë‚†™‚°ñ‚†í‚†í‚†í‚†í‚†í‚†í‚†∂‚†õ‚†ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚¢î‚°¢‚†ç‚†â‚†â‚†©‚†≠‚¢ë‚£§‚£î‚†≤‚†§‚†≠‚†≠‚†§‚†¥‚¢ä‚°ª‚£ø
‚°ø‚†Å‚¢Ä‚†á‚†Ä‚†Ä‚†Ä‚£§‚†≠‚†ì‚†ä‚£Å‚£§‚†Ç‚††‚¢Ä‚°à‚†±‚£∂‚£Ü‚£†‚£¥‚°ñ‚†Å‚†Ç‚£Ä‚†à‚¢∑‚£Æ‚£π
‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚¢≥‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£ø‚°ø‚¢ø‚£ø‚£á‚£Ä‚£•‚£§‚†§‚¢º‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ü‚†ë‚†ö‚¢π‚°ü‚†â‚£ë‚†í‚¢∫‚°á‚°Ä‚†Ä‚°π‚†Ä‚†Ä‚£Ä‚£¥‚£Ω‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚£ø‚†í‚†â‚†Ä‚†Ä‚¢†‚†É‚†à‚†ô‚†ª‚£ç‚†ô‚¢ª‚°ª‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£ò‚°Ñ‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†ò‚°á‚†Ä‚†Ä‚†Ä‚†ò‚°Ñ‚†Ä‚¢±‚¢∏‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚††‚°Ä‚†Ä‚†æ‚£ü‚£ª‚£õ‚†∑‚£∂‚£º‚£•‚£Ä‚£Ä‚£Ä‚†Ä‚¢ß‚†Ä‚†Ä‚†Ä‚††‚£ß‚£Ä‚£º‚£¥‚¢Ω‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Å‚†Ä‚†π‚°ô‚†õ‚†∑‚£ø‚£≠‚£Ø‚£≠‚£ü‚£õ‚£ø‚£ø‚£ø‚£õ‚£õ‚£ø‚£≠‚£≠‚£æ‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚†Ä‚£á‚†Ä‚†â‚†â‚†â‚°è‚†â‚†ô‚†õ‚†õ‚°ø‚£ª‚£Ø‚£∑‚£ø‚£ø‚£ø
‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚°∏‚†Å‚£†‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£¶‚£§‚£§‚£§‚£∑‚£§‚£Ñ‚£à‚£Ü‚£§‚£§‚£ß‚£∂‚£∑‚£ø‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
    """

    def __init__(self):
        self.client = Client(
            api_key=os.getenv("BINANCE_API_KEY"),
            api_secret=os.getenv("BINANCE_SECRET_KEY"),
            testnet=True
        )
        self.client.API_URL = os.getenv("BINANCE_BASE_URL")

        self.symbol = self.SYMBOL
        self.qty_precision = self.QTY_PRECISION
        self.price_precision = self.PRICE_PRECISION
        self.min_qty = self.MIN_QTY
        self.leverage = self.LEVERAGE
        self.balance = self.INIT_BALANCE

        self.position = 0
        self.entry_price = None
        self.entry_commission = 0
        self.last_qty = 0
        self.entry_time = 0

        self.running = False
        self.trade_logs = []

        # Î†àÎ≤ÑÎ¶¨ÏßÄ ÏÑ§Ï†ï
        try:
            self.client.futures_change_leverage(symbol=self.symbol, leverage=self.leverage)
            self._log(f"[ÏÑ§Ï†ï] ü§ñÎ†àÎ≤ÑÎ¶¨ÏßÄü§ñ {self.leverage}x ÏÑ§Ï†ï ÏôÑÎ£å.")
        except Exception as e:
            self._log(f"[Ïò§Î•ò] Î†àÎ≤ÑÎ¶¨ÏßÄ ÏÑ§Ï†ï Ïã§Ìå®: {e}")

    def _log(self, message):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.trade_logs.append(log_entry)

    def start_bot(self):
        self.running = True
        self._log("[Î¥á ÏãúÏûë] Ìä∏Î†àÏù¥Îî© Î£®ÌîÑ ÏãúÏûë.")
        self._log(self.AKIRA_ART)

        while self.running:
            df = self.fetch_data()
            if df is None:
                time.sleep(5)
                continue

            signal = self.get_signal(df)
            current_price = self.get_price()
            if current_price is None:
                time.sleep(5)
                continue

            if signal == 1 and self.position <= 0:
                if self.position == -1:
                    self.close_position(current_price, "Ïã†Ìò∏ Ï†ÑÌôò")
                qty = self.calc_max_qty(current_price)
                if qty > self.min_qty:
                    self.enter_position("BUY", qty, current_price)
            elif signal == -1 and self.position >= 0:
                if self.position == 1:
                    self.close_position(current_price, "Ïã†Ìò∏ Ï†ÑÌôò")
                qty = self.calc_max_qty(current_price)
                if qty > self.min_qty:
                    self.enter_position("SELL", qty, current_price)

            self.manage_position(current_price)
            time.sleep(5)

    def stop(self):
        self.running = False
        self._log("[Î¥á Ï†ïÏßÄ] Ìä∏Î†àÏù¥Îî© Î£®ÌîÑ Ï¢ÖÎ£å.")

    def fetch_data(self):
        try:
            klines = self.client.futures_klines(symbol=self.symbol, interval="1m", limit=100)
            df = pd.DataFrame(klines, columns=[
                'timestamp','Open','High','Low','Close','Volume','close_time','quote_vol','trades',
                'taker_base_vol','taker_quote_vol','ignore'
            ])
            df[['Open','High','Low','Close','Volume']] = df[['Open','High','Low','Close','Volume']].astype(float)
            df['Willr'] = ta.momentum.williams_r(df['High'], df['Low'], df['Close'], lbp=14)
            df['RSI'] = ta.momentum.RSIIndicator(df['Close'], window=14).rsi()
            df['Vol_MA5'] = df['Volume'].rolling(5).mean()
            df.dropna(inplace=True)
            return None if df.empty else df
        except Exception as e:
            self._log(f"[Ïò§Î•ò] Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®: {e}")
            return None

    def get_signal(self, df):
        willr, rsi = df['Willr'].iloc[-1], df['RSI'].iloc[-1]
        vol, vol_ma = df['Volume'].iloc[-1], df['Vol_MA5'].iloc[-1]
        if willr < -85 and rsi < 37 and vol > vol_ma * 1.05:
            self._log(f"[Ïã†Ìò∏ Î∞úÏÉù] Î°± (Willr:{willr:.2f}, RSI:{rsi:.2f})")
            return 1
        if willr > -15 and rsi > 63 and vol > vol_ma * 1.05:
            self._log(f"[Ïã†Ìò∏ Î∞úÏÉù] Ïàè (Willr:{willr:.2f}, RSI:{rsi:.2f})")
            return -1
        return 0

    def get_price(self):
        try:
            return float(self.client.futures_symbol_ticker(symbol=self.symbol)['price'])
        except Exception as e:
            self._log(f"[Ïò§Î•ò] ÌòÑÏû¨Í∞Ä Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None

    def calc_max_qty(self, price):
        notional = self.balance * self.leverage
        qty = round(max(notional / price, self.min_qty), self.qty_precision)
        self._log(f"[Í≥ÑÏÇ∞] ÏµúÎåÄ ÏßÑÏûÖ ÏàòÎüâ: {qty} (ÏûêÏÇ∞: {self.balance:.2f}, Î†àÎ≤ÑÎ¶¨ÏßÄ: {self.leverage}x)")
        return qty

    def enter_position(self, side, qty, price):
        try:
            self.client.futures_create_order(symbol=self.symbol, side=side, type="MARKET", quantity=qty)
            self.position = 1 if side == "BUY" else -1
            self.entry_price = price
            self.last_qty = qty
            # ÏßÑÏûÖ ÏàòÏàòÎ£å Í≥ÑÏÇ∞ Î∞è Ï∞®Í∞ê
            commission_entry = price * qty * self.FEE
            self.balance -= commission_entry
            self.entry_commission = commission_entry
            self._log(f"[ÏßÑÏûÖ ÏÑ±Í≥µ] {('Î°±' if self.position==1 else 'Ïàè')} ÏàòÎüâ: {qty}, Í∞ÄÍ≤©: {price:.2f} USDT")
            self._log(f"[ÏßÑÏûÖ ÏàòÏàòÎ£å] {commission_entry:.4f} USDT")
        except Exception as e:
            self._log(f"[ÏßÑÏûÖ Ïã§Ìå®] {e}")
            self.position = 0

    def close_position(self, price, reason=""):
        if self.position == 0: return
        side_to_close = "SELL" if self.position == 1 else "BUY"
        current_pos = 'Î°±' if self.position==1 else 'Ïàè'
        try:
            self.client.futures_create_order(symbol=self.symbol, side=side_to_close, type="MARKET", quantity=self.last_qty)
            # ÏõêÏãú PnL
            pnl_raw = ((price - self.entry_price) if self.position==1 else (self.entry_price - price)) * self.last_qty
            # Ï≤≠ÏÇ∞ ÏàòÏàòÎ£å
            commission_exit = price * self.last_qty * self.FEE
            total_commission = self.entry_commission + commission_exit
            net_pnl = pnl_raw - total_commission
            self.balance += net_pnl
            self._log(f"[Ï≤≠ÏÇ∞ ÏÑ±Í≥µ] {current_pos} Ï≤≠ÏÇ∞, Í∞ÄÍ≤©: {price:.2f}, ÏõêÏù∏: {reason}")
            self._log(f"    ÏõêÏãú PnL: {pnl_raw:.4f} USDT, ÏàòÏàòÎ£å(ÏûÖÏû•): {self.entry_commission:.4f}, ÏàòÏàòÎ£å(Ï≤≠ÏÇ∞): {commission_exit:.4f}, ÏàúÏàòÏùµ: {net_pnl:.4f} USDT, ÏûîÍ≥†: {self.balance:.2f}")
            self._log(self.PROFIT_ART if net_pnl>=0 else self.LOSS_ART)
        except Exception as e:
            self._log(f"[Ï≤≠ÏÇ∞ Ïã§Ìå®] {e}")
        finally:
            self.position = 0
            self.entry_price = None
            self.entry_commission = 0
            self.last_qty = 0

    def manage_position(self, current_price):
        if self.position == 0 or current_price is None: return
        # ÎØ∏Ïã§ÌòÑ PnL
        current_pnl = ((current_price - self.entry_price) if self.position==1 else (self.entry_price - current_price)) * self.last_qty
        # Ìà¨Ïûê ÏûêÎ≥∏
        invested = (self.entry_price * self.last_qty) / self.leverage
        # Ï¥ù ÏàòÏàòÎ£å Ï∂îÏ†ï
        commission_exit = current_price * self.last_qty * self.FEE
        total_comm = self.entry_commission + commission_exit
        # ÏàúÏàòÏùµ Î∞è ÎπÑÏú®
        net_pnl = current_pnl - total_comm
        net_pct = net_pnl / invested if invested>0 else 0
        self._log(f"[Ìè¨ÏßÄÏÖò Í¥ÄÎ¶¨] Ïàú PnL: {net_pnl:.4f} USDT, ÏàúÏàòÏùµÎ•†: {net_pct*100:.2f}%")
        if net_pct >= self.TP:
            self.close_position(current_price, "TP ÎèÑÎã¨ (net)")
        elif net_pct <= self.SL:
            self.close_position(current_price, "SL ÎèÑÎã¨ (net)")
