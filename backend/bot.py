import os
import time
from dotenv import load_dotenv
from binance.client import Client
import pandas as pd
import numpy as np
import ta

load_dotenv()

class BinanceBot:
    SYMBOL = "BTCUSDT"
    QTY_PRECISION = 3
    PRICE_PRECISION = 2
    MIN_QTY = 0.001
    LEVERAGE = 125
    INIT_BALANCE = 50.0 # ь┤Иъ╕░ ьЮРьВ░

    # TP ъ░ТьЭД 0.04 (4%)ыбЬ, SL ъ░ТьЭД -0.02 (-2%)ыбЬ ьЮмьДдьаХ
    # ьЭ┤ ъ░ТыУдьЭА ьЭ┤ьаЬ эИмьЮР ьЫРъ╕И ыМАы╣Д ыкйэСЬ ьИШьЭ╡ыеа/ьЖРьЛдыеаьЭД ыВШэГАыГЕыЛИыЛд.
    TP = 0.04  # ыкйэСЬ 4% ьИШьЭ╡ (эИмьЮР ьЫРъ╕И ыМАы╣Д)
    SL = -0.015 # ыкйэСЬ 2% ьЖРьЛд (эИмьЮР ьЫРъ╕И ыМАы╣Д)

    # AKIRA ASCII Art for bot start
    AKIRA_ART = r"""
тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таЫтаЙтаЙтаЙтаЙтаЫта╗тг┐тг┐та┐таЫтаЫтаЩтаЫта╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐таЯтаБтаАтаАтаАтвАтгАтгАтбАтаАтаИтвДтаАтаАтаАтаАтаАтаАтаАтв╗тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐таПтаАтаАтаАтаФтаЙтаБтаАтаАтаИтаЙтаУтв╝тбдтаФтаТтаАтаРтаТтавтаМта┐тв┐тг┐тг┐тг┐
тг┐тг┐тг┐тбПтаАтаАтаАтаАтаАтаАтвАтадтгТта╢тадтантантвЭтбвтгДтвдтгДтгТтб╢та╢тг╢тгвтбЭтв┐тг┐
тб┐таЛтаБтаАтаАтаАтаАтгАта▓таотвХтг╜таЦтвйтаЙтаЩтг╖тг╢тготбНтвЙтг┤таЖтгнтвЙтаСтг╢тготгЕтв╗
таАтаАтаАтаАтаАтаАтаАтаЙтаТтаТта╗тг┐тгДтадтаШтвГтг┐тг┐тб┐талтг┐тг┐тгДтадтаШтвГтг┐тг┐та┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтаИтаУтадтантгетгАтгЙтбйтбета┤таГтаАтаИтаЙтаБтаИтаЙтаБтг┤тг╛тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгАтадтаФтаКтаАтаАтаАтаУта▓тбдтадтаЦтаРтв┐тг┐тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтгатгДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтв╗тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтв╕тг┐тб╗тв╖тгдтгАтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгШтг┐тг┐
таАтаАтаАтаАтаАтаатбАтаАтаЩтв┐тг╖тг╜тг╜тгЫтгЯтг╗та╖та╢тв╢тгжтгдтгдтгдтгдтг╢та╛таЯтгптг┐тг┐
таАтаАтаАтаАтаАтаАтаЙтаВтаАтаАтаАтаИтаЙтаЩтаЫта╗та┐та┐та┐та┐та╢та╢та╢та╢та╛тг┐тгЯтг┐тг┐тг┐
тгАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтг┤тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг╢тгдтгАтгАтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтгАтгдтгЯтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тг╢тг╢тг╢тг╢тг╢тг╢тг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
    """

    # ASCII Art for profit
    PROFIT_ART = r"""
тг┐тг┐тг┐тг┐тг┐тг┐тг┐тб┐таЫтаЙтаЙтаЙтаЙтаЫта╗тг┐тг┐та┐таЫтаЫтаЩтаЫта╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐таЯтаБтаАтаАтаАтвАтгАтгАтбАтаАтаИтвДтаАтаАтаАтаАтаАтаАтаАтв╗тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐таПтаАтаАтаАтаФтаЙтаБтаАтаАтаИтаЙтаУтв╝тбдтаФтаТтаАтаРтаТтавтаМта┐тв┐тг┐тг┐тг┐
тг┐тг┐тг┐тбПтаАтаАтаАтаАтаАтаАтвАтадтгТта╢тадтантантвЭтбвтгДтвдтгДтгТтб╢та╢тг╢тгвтбЭтв┐тг┐
тб┐таЛтаБтаАтаАтаАтаАтгАта▓таотвХтг╜таЦтвйтаЙтаЩтг╖тг╢тготбНтвЙтг┤таЖтгнтвЙтаСтг╢тготгЕтв╗
таАтаАтаАтаАтаАтаАтаАтаЙтаТтаТта╗тг┐тгДтадтаШтвГтг┐тг┐тб┐талтг┐тг┐тгДтадтаШтвГтг┐тг┐та┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтаИтаУтадтантгетгАтгЙтбйтбета┤таГтаАтаИтаЙтаБтаИтаЙтаБтг┤тг╛тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгАтадтаФтаКтаАтаАтаАтаУта▓тбдтадтаЦтаРтв┐тг┐тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтгатгДтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтв╗тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтв╕тг┐тб╗тв╖тгдтгАтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтгШтг┐тг┐
таАтаАтаАтаАтаАтаатбАтаАтаЩтв┐тг╖тг╜тг╜тгЫтгЯтг╗та╖та╢тв╢тгжтгдтгдтгдтгдтг╢та╛таЯтгптг┐тг┐
таАтаАтаАтаАтаАтаАтаЙтаВтаАтаАтаАтаИтаЙтаЩтаЫта╗та┐та┐та┐та┐та╢та╢та╢та╢та╛тг┐тгЯтг┐тг┐тг┐
тгАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтг┤тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг╢тгдтгАтгАтбАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтаАтвАтгАтгдтгЯтв┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╖тг╢тг╢тг╢тг╢тг╢тг╢тг╛тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
    """

    # ASCII Art for loss
    LOSS_ART = r"""
тг┐тг┐тг┐тг┐тг┐тг┐тг┐таЯтаЛтаЙтаБтаИтаЙтаЩта╗тв┐тб┐та┐таЫтаЛтаЙтаЩтаЫтв┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐таЯтаБтаАтаАтвАтгАтгАтгАтгАтбАтаАтвЖтаАтаАтаАтаАтаАтаАтаАтв╗тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐таГтаАтаАтаатаКтаБтаАтаАтаАтаАтаИтаСтактбЦтаТтаТтаТтаТтаТтаТта╢таЫта┐тг┐тг┐тг┐
тг┐тг┐тб┐тбЗтаАтаАтаАтаАтаАтаАтбатвФтбвтаНтаЙтаЙтайтантвСтгдтгФта▓тадтантантадта┤твКтб╗тг┐
тб┐таБтвАтаЗтаАтаАтаАтгдтантаУтаКтгБтгдтаВтаатвАтбИта▒тг╢тгЖтгатг┤тбЦтаБтаВтгАтаИтв╖тготг╣
таБтаАтаАтаАтаАтаАтаАтаИтаЙтв│тг┐тг┐тг┐тбАтаАтаАтвАтгАтг┐тб┐тв┐тг┐тгЗтгАтгетгдтадтв╝тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтв╕тбЯтаСтаЪтв╣тбЯтаЙтгСтаТтв║тбЗтбАтаАтб╣таАтаАтгАтг┤тг╜тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАтв╕тбЗтаАтаАтг┐таТтаЙтаАтаАтватаГтаИтаЩта╗тгНтаЩтв╗тб╗тг┐тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтгАтгШтбДтаАтаАтв╕тбЗтаАтаАтаАтаШтбЗтаАтаАтаАтаШтбДтаАтв▒тв╕тг┐тг┐
таАтаАтаАтаАтаатбАтаАта╛тгЯтг╗тгЫта╖тг╢тг╝тгетгАтгАтгАтаАтвзтаАтаАтаАтаатгзтгАтг╝тг┤тв╜тг┐
таАтаАтаАтаАтаАтаИтаЙтаБтаАта╣тбЩтаЫта╖тг┐тгнтгптгнтгЯтгЫтг┐тг┐тг┐тгЫтгЫтг┐тгнтгнтг╛тг┐тг┐
таАтаАтаАтаАтаАтаАтаАтаАтаАта╕тбАтаАтаАтгЗтаАтаЙтаЙтаЙтбПтаЙтаЩтаЫтаЫтб┐тг╗тгптг╖тг┐тг┐тг┐
тг╢тгдтгАтаАтаАтаАтаАтаАтаАтаАтбЗтаАтаАтв╕таАтаАтаАтб╕таБтгатг┤тг╢тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг╢тг╢тгжтгдтгдтгдтг╖тгдтгДтгИтгЖтгдтгдтгзтг╢тг╖тг┐тб╗тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐
тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг┐тг╛тв┐тг┐тг┐тг┐тг┐тг┐тг┐
    """

    def __init__(self):
        self.client = Client(
            api_key=os.getenv("BINANCE_API_KEY"),
            api_secret=os.getenv("BINANCE_SECRET_KEY"),
            testnet=True
        )
        self.client.API_URL = os.getenv("BINANCE_BASE_URL")

        self.symbol = self.SYMBOL
        self.qty_precision = self.QTY_PRECISION
        self.price_precision = self.PRICE_PRECISION
        self.min_qty = self.MIN_QTY
        self.leverage = self.LEVERAGE
        self.balance = self.INIT_BALANCE

        self.position = 0
        self.entry_price = None
        self.last_qty = 0
        self.entry_time = 0

        self.running = False
        self.trade_logs = []

        try:
            self.client.futures_change_leverage(symbol=self.symbol, leverage=self.leverage)
            self._log(f"[ьДдьаХ] ЁЯдЦыаИы▓ДыжмьзАЁЯдЦ {self.leverage}x ьДдьаХ ьЩДыгМ.")
        except Exception as e:
            self._log(f"[ьШдыеШ] ыаИы▓ДыжмьзА ьДдьаХ ьЛдэМи: {e}")

    def _log(self, message):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.trade_logs.append(log_entry)

    def start_bot(self):
        self.running = True
        self._log("[ы┤З ьЛЬьЮС] эК╕ыаИьЭ┤ыФй ыгиэФД ьЛЬьЮС.")
        self._log(self.AKIRA_ART) # ы┤З ьЛЬьЮС ьЛЬ ьХДьКдэВд ьХДэК╕ ь╢Ьыае

        while self.running:
            df = self.fetch_data()
            if df is None:
                self._log("[ъ▓╜ъ│а] ыН░ьЭ┤эД░эФДыаИьЮД ьЧЖьЭМ. 5ь┤И эЫД ьЮмьЛЬыПД.")
                time.sleep(5)
                continue

            signal = self.get_signal(df)
            current_price = self.get_price()

            if current_price is None:
                self._log("[ъ▓╜ъ│а] эШДьЮмъ░А ьб░эЪМ ьЛдэМи. 5ь┤И эЫД ьЮмьЛЬыПД.")
                time.sleep(5)
                continue

            self._log(f"[ьГБэГЬ] ьЛаэШ╕: {signal}, эШДьЮмъ░А: {current_price:.{self.PRICE_PRECISION}f}, эПмьзАьЕШ: {self.position}")

            if signal == 1: # Long signal
                if self.position <= 0:
                    self._log(f"[ьзДьЮЕ ьЛЬыПД] ыб▒ (ьЭ┤ьаД эПмьзАьЕШ: {'ьИП' if self.position == -1 else 'ьЧЖьЭМ'})")
                    if self.position == -1:
                        self.close_position(current_price, "ьЛаэШ╕ ьаДэЩШ")
                    
                    qty = self.calc_max_qty(current_price)
                    if qty > self.min_qty:
                        self.enter_position("BUY", qty, current_price)
                    else:
                        self._log(f"[ьзДьЮЕ ьЛдэМи] ъ│ДьВ░ыРЬ ьИШыЯЙ ({qty})ьЭ┤ ь╡ЬьЖМ ьИШыЯЙ ({self.min_qty})ы│┤ыЛд ьЮСьК╡ыЛИыЛд.")
                else:
                    self._log("[ьаХы│┤] ыб▒ ьЛаэШ╕ ы░ЬьГЭ, ьЭ┤ып╕ ыб▒ эПмьзАьЕШ ьдС.")
            elif signal == -1: # Short signal
                if self.position >= 0:
                    self._log(f"[ьзДьЮЕ ьЛЬыПД] ьИП (ьЭ┤ьаД эПмьзАьЕШ: {'ыб▒' if self.position == 1 else 'ьЧЖьЭМ'})")
                    if self.position == 1:
                        self.close_position(current_price, "ьЛаэШ╕ ьаДэЩШ")

                    qty = self.calc_max_qty(current_price)
                    if qty > self.min_qty:
                        self.enter_position("SELL", qty, current_price)
                    else:
                        self._log(f"[ьзДьЮЕ ьЛдэМи] ъ│ДьВ░ыРЬ ьИШыЯЙ ({qty})ьЭ┤ ь╡ЬьЖМ ьИШыЯЙ ({self.min_qty})ы│┤ыЛд ьЮСьК╡ыЛИыЛд.")
                else:
                    self._log("[ьаХы│┤] ьИП ьЛаэШ╕ ы░ЬьГЭ, ьЭ┤ып╕ ьИП эПмьзАьЕШ ьдС.")
            else:
                self._log("[ьаХы│┤] ьЛаэШ╕ ьЧЖьЭМ.")

            self.manage_position(current_price)
            time.sleep(5)

    def stop(self):
        self.running = False
        self._log("[ы┤З ьаХьзА] эК╕ыаИьЭ┤ыФй ыгиэФД ьвЕыгМ.")

    def fetch_data(self):
        try:
            klines = self.client.futures_klines(symbol=self.symbol, interval="1m", limit=100)
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'Open', 'High', 'Low', 'Close', 'Volume',
                'close_time', 'quote_vol', 'trades',
                'taker_base_vol', 'taker_quote_vol', 'ignore'
            ])
            df[['Open','High','Low','Close','Volume']] = df[['Open','High','Low','Close','Volume']].astype(float)
            
            df['Willr'] = ta.momentum.williams_r(df['High'], df['Low'], df['Close'], lbp=14)
            df['RSI'] = ta.momentum.RSIIndicator(df['Close'], window=14).rsi()
            df['Vol_MA5'] = df['Volume'].rolling(5).mean()
            
            df.dropna(inplace=True) 
            
            if df.empty:
                self._log("[ъ▓╜ъ│а] ыН░ьЭ┤эД░эФДыаИьЮДьЭ┤ ы╣ДьЦ┤ьЮИьК╡ыЛИыЛд. ьзАэСЬ ъ│ДьВ░ьЧР эХДьЪФэХЬ ыН░ьЭ┤эД░ъ░А ы╢Аьб▒эХа ьИШ ьЮИьК╡ыЛИыЛд.")
                return None
            return df
        except Exception as e:
            self._log(f"[ьШдыеШ] ыН░ьЭ┤эД░ ьИШьзС ьЛдэМи: {e}")
            return None

    def get_signal(self, df):
        """
        Generates a trading signal (1 for long, -1 for short, 0 for neutral)
        based on Williams %R, RSI, and Volume confirmation.
        Adjusted conditions for potentially more frequent signals.
        """
        if df is None or df.empty:
            return 0

        willr = df['Willr'].iloc[-1]
        rsi = df['RSI'].iloc[-1]
        vol = df['Volume'].iloc[-1]
        vol_ma = df['Vol_MA5'].iloc[-1]

        if np.isnan(willr) or np.isnan(rsi) or np.isnan(vol_ma):
            self._log(f"[ьаХы│┤] ьзАэСЬьЧР NaN ъ░Т эПмэХи: Willr={willr:.2f}, RSI={rsi:.2f}, Vol_MA={vol_ma:.2f}. ьЛаэШ╕ ьЧЖьЭМ.")
            return 0

        # --- ьб░ьаХыРЬ ьЛаэШ╕ ыбЬьзБ (ьВмьЪйьЮРъ╗ШьДЬ ьзАьаХэХ┤ьг╝ьЛа ъ░ТьЬ╝ыбЬ ьЧЕыН░ьЭ┤эК╕) ---
        # ыб▒ ьЛаэШ╕: Willr < -83, RSI < 38, Vol > Vol_MA * 1.03
        if willr < -83 and rsi < 38 and vol > vol_ma * 1.03:
            self._log(f"[ьЛаэШ╕ ы░ЬьГЭ] ыб▒ ЁЯУИЁЯУИ (Willr:{willr:.2f} < -83, RSI:{rsi:.2f} < 38, Vol:{vol:.2f} > Vol_MA:{vol_ma:.2f}*1.03)")
            return -1
        # ьИП ьЛаэШ╕: Willr > -17, RSI > 62, Vol > Vol_MA * 1.03
        elif willr > -17 and rsi > 62 and vol > vol_ma * 1.03:
            self._log(f"[ьЛаэШ╕ ы░ЬьГЭ] ьИП ЁЯУЙЁЯУЙ (Willr:{willr:.2f} > -17, RSI:{rsi:.2f} > 62, Vol:{vol:.2f} > Vol_MA:{vol_ma:.2f}*1.03)")
            return 1
        
        return 0

    def get_price(self):
        try:
            price = float(self.client.futures_symbol_ticker(symbol=self.symbol)['price'])
            return price
        except Exception as e:
            self._log(f"[ьШдыеШ] эШДьЮмъ░А ьб░эЪМ ьЛдэМи: {e}")
            return None

    def calc_max_qty(self, price):
        if price is None or price == 0:
            self._log("[ьШдыеШ] ьЬаэЪиэХШьзА ьХКьЭА ъ░Аъ▓йьЬ╝ыбЬ ьИШыЯЙ ъ│ДьВ░ ы╢Иъ░А.")
            return 0
        
        notional = self.balance * self.leverage
        raw_qty = notional / price
        qty = round(max(raw_qty, self.min_qty), self.qty_precision)
        self._log(f"[ъ│ДьВ░] ь╡ЬыМА ьзДьЮЕ ьИШыЯЙ: {qty} {self.symbol} (ьЮРьВ░: {self.balance:.2f} USDT, ыаИы▓ДыжмьзА: {self.leverage}x)")
        return qty

    def enter_position(self, side, qty, price):
        try:
            order = self.client.futures_create_order(
                symbol=self.symbol,
                side=side,
                type="MARKET",
                quantity=qty
            )
            self.position = 1 if side == "BUY" else -1
            self.entry_price = price
            self.last_qty = qty
            
            pos_type = "ыб▒" if self.position == 1 else "ьИП"
            self._log(f"[ьзДьЮЕ ьД▒ъ│╡] {pos_type} эПмьзАьЕШ. ьИШыЯЙ: {qty} {self.symbol}, ьзДьЮЕ ъ░Аъ▓й: {price:.{self.PRICE_PRECISION}f} USDT.")
        except Exception as e:
            self._log(f"[ьзДьЮЕ ьЛдэМи] {side} ьг╝ым╕ ьЛдэМи: {e}. ьИШыЯЙ: {qty}, ъ░Аъ▓й: {price}")
            self.position = 0 
            self.entry_price = None
            self.last_qty = 0

    def close_position(self, price, reason=""):
        if self.position == 0:
            return

        side_to_close = "SELL" if self.position == 1 else "BUY"
        current_pos_type = "ыб▒" if self.position == 1 else "ьИП"
        
        try:
            order = self.client.futures_create_order(
                symbol=self.symbol,
                side=side_to_close,
                type="MARKET",
                quantity=round(self.last_qty, self.qty_precision)
            )
            
            # PnL ъ│ДьВ░ (ьИШьИШыгМ эПмэХи)
            pnl_raw = ((price - self.entry_price) if self.position == 1 else (self.entry_price - price)) * self.last_qty
            commission = price * self.last_qty * 0.0004 # Binance Futures taker fee
            
            self.balance += (pnl_raw - commission) # ьЮФъ│а ьЧЕыН░ьЭ┤эК╕
            
            self._log(
                f"[ь▓ньВ░ ьД▒ъ│╡] {current_pos_type} эПмьзАьЕШ ь▓ньВ░ ({side_to_close} ьг╝ым╕). "
                f"ьИШыЯЙ: {self.last_qty} {self.symbol}, ь▓ньВ░ ъ░Аъ▓й: {price:.{self.PRICE_PRECISION}f} USDT. "
                f"ьЫРьЭ╕: {reason}. "
                f"ьИШьЭ╡(PnL): {pnl_raw:.4f} USDT, ьИШьИШыгМ: {commission:.4f} USDT, "
                f"ьИЬьИШьЭ╡: {(pnl_raw - commission):.4f} USDT. "
                f"эШДьЮм ьЮФъ│а: {self.balance:.2f} USDT."
            )
            
            # ьИШьЭ╡ ыШРыКФ ьЖРьЛдьЧР ыФ░ыЭ╝ ыЛдые╕ ьХДьКдэВд ьХДэК╕ ь╢Ьыае
            if pnl_raw >= 0:
                self._log(self.PROFIT_ART)
            else:
                self._log(self.LOSS_ART)

        except Exception as e:
            self._log(f"[ь▓ньВ░ ьЛдэМи] {current_pos_type} эПмьзАьЕШ {side_to_close} ьг╝ым╕ ьЛдэМи: {e}. "
                      f"ьИШыЯЙ: {self.last_qty}, ъ░Аъ▓й: {price}. ьЫРьЭ╕: {reason}")
        finally:
            self.position = 0
            self.entry_price = None
            self.last_qty = 0

    def manage_position(self, current_price):
        if self.position == 0 or current_price is None:
            return

        # эШДьЮм эПмьзАьЕШ ып╕ьЛдэШД ьЖРьЭ╡ (USD ыЛиьЬД) ъ│ДьВ░
        current_pnl_usd = ((current_price - self.entry_price) if self.position == 1 else \
                           (self.entry_price - current_price)) * self.last_qty
        
        # эИмьЮРыРЬ ьЫРъ╕И (ь┤Иъ╕░ ызИьзД) ъ│ДьВ░
        # Futures tradingьЧРьДЬ ьЛдьаЬ эИмьЮРыРЬ ьЮРы│╕ьЭА (ьзДьЮЕ ъ░Аъ▓й * ьИШыЯЙ) / ыаИы▓ДыжмьзА ьЮЕыЛИыЛд.
        # ы╢Дыкиъ░А 0ьЭ┤ ыРШыКФ ъ▓ГьЭД ы░йьзА
        invested_capital = (self.entry_price * self.last_qty) / self.leverage if self.leverage != 0 else 0
        
        pnl_percentage = 0
        if invested_capital > 0: # 0ьЬ╝ыбЬ ыВШыИДыКФ ъ▓ГьЭД ы░йьзА
            pnl_percentage = (current_pnl_usd / invested_capital) # ьЖМьИШьаР эШХэГЬ (ьШИ: 0.04 = 4%)
        
        # ыаИы▓ДыжмьзАые╝ ъ│аыадэХЬ эШДьЮм ьШИьГБ ь┤Э ьЮРьВ░ (ьЛдэШД ьЮФъ│а + ып╕ьЛдэШД ьЖРьЭ╡)
        estimated_balance = self.balance + current_pnl_usd

        current_pos_type = "ыб▒" if self.position == 1 else "ьИП"

        # эПмьзАьЕШ ьЬаьзА ьдС ыбЬъ╖╕ьЧР ьЖРьЭ╡(USD), ьИШьЭ╡ыеа(%), ь┤Э ьЮРьВ░ ьаХы│┤ ь╢Фъ░А
        self._log(
            f"[эПмьзАьЕШ ъ┤Аыжм] {current_pos_type} эПмьзАьЕШ ьЬаьзА. "
            f"ьзДьЮЕ: {self.entry_price:.{self.PRICE_PRECISION}f}, эШДьЮм: {current_price:.{self.PRICE_PRECISION}f}. "
            f"ьШИьГБ ьЖРьЭ╡: {current_pnl_usd:.4f} USDT, ьШИьГБ ьИШьЭ╡ыеа: {pnl_percentage*100:.2f}%. "
            f"ьШИьГБ ь┤Э ьЮРьВ░: {estimated_balance:.2f} USDT."
        )

        # TP/SL ьб░ъ▒┤ ь▓┤эБм (ьЖРьЭ╡ыеа ъ╕░ьдА)
        if pnl_percentage >= self.TP:
            self._log(f"[TP ыПДыЛм] {current_pos_type} эПмьзАьЕШ ь▓ньВ░ (ыкйэСЬ ьИШьЭ╡ыеа: {self.TP*100:.2f}%, эШДьЮм ьИШьЭ╡ыеа: {pnl_percentage*100:.2f}%)")
            self.close_position(current_price, "TP ыПДыЛм (ьИШьЭ╡ыеа)")
        elif pnl_percentage <= self.SL:
            self._log(f"[SL ыПДыЛм] {current_pos_type} эПмьзАьЕШ ь▓ньВ░ (ыкйэСЬ ьЖРьЛдыеа: {self.SL*100:.2f}%, эШДьЮм ьЖРьЛдыеа: {pnl_percentage*100:.2f}%)")
            self.close_position(current_price, "SL ыПДыЛм (ьЖРьЛдыеа)")
